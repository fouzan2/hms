#!/bin/bash
echo "📋 Final Validation Checklist"

echo "✅ Test Requirements:"
echo "  - Local test completes in < 10 minutes: $(test -f 'test_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - Preprocessing tests pass: $(test -f 'preprocessing_test_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - Adaptive preprocessing tests pass: $(test -f 'adaptive_preprocessing_test_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - EEG Foundation Model tests pass: $(test -f 'eeg_foundation_model_test_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - Explainable AI tests pass: $(test -f 'interpretability_test_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - ONNX model exports successfully: $(test -f 'models/onnx/test_model.onnx' && echo 'YES' || echo 'NO')"
echo "  - All imports work: $(test -f 'debug_passed.flag' && echo 'YES' || echo 'NO')"
echo "  - Configuration loads: $(python -c 'import yaml; yaml.safe_load(open(\"config/test_config.yaml\"))' 2>/dev/null && echo 'YES' || echo 'NO')"
echo "  - CUDA available: $(python -c 'import torch; print(torch.cuda.is_available())' 2>/dev/null)"

echo ""
echo "📁 Generated Files:"
ls -la models/onnx/ 2>/dev/null || echo "  No ONNX files found"
ls -la models/final/ 2>/dev/null || echo "  No model files found"
ls -la data/processed/ 2>/dev/null || echo "  No processed data found"

echo ""
echo "🧪 Adaptive Preprocessing Features:"
echo "  - Data profiling functionality: $(python -c 'from src.preprocessing.adaptive_preprocessor import DataProfiler; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Parameter optimization: $(python -c 'from src.preprocessing.adaptive_preprocessor import PreprocessingOptimizer; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Quality assessment: $(python -c 'from src.preprocessing import SignalQualityAssessor; print(\"YES\")' 2>/dev/null || echo 'NO')"

echo ""
echo "🤖 EEG Foundation Model Features:"
echo "  - Foundation model architecture: $(python -c 'from src.models import EEGFoundationModel; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Multi-scale temporal encoding: $(python -c 'from src.models.eeg_foundation_model import MultiScaleTemporalEncoder; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Channel attention mechanism: $(python -c 'from src.models.eeg_foundation_model import ChannelAttention; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Pre-training capabilities: $(python -c 'from src.models import EEGFoundationPreTrainer; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Fine-tuning framework: $(python -c 'from src.models import EEGFoundationTrainer; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Transfer learning pipeline: $(python -c 'from src.models import TransferLearningPipeline; print(\"YES\")' 2>/dev/null || echo 'NO')"

echo ""
echo "🔍 Explainable AI Features:"
echo "  - Counterfactual explanations: $(python -c 'from src.interpretability import CounterfactualGenerator; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - SHAP integration: $(python -c 'from src.interpretability import SHAPExplainer; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Gradient explanations: $(python -c 'from src.interpretability import GradientExplanationFramework; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Attention visualization: $(python -c 'from src.interpretability import AttentionVisualizer; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Clinical interpretation: $(python -c 'from src.interpretability import ClinicalInterpreter; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Integrated gradients: $(python -c 'from src.interpretability import IntegratedGradients; print(\"YES\")' 2>/dev/null || echo 'NO')"
echo "  - Grad-CAM visualization: $(python -c 'from src.interpretability import GradCAM; print(\"YES\")' 2>/dev/null || echo 'NO')"

echo ""
echo "🚀 Ready for Novita AI deployment: $(test -f 'test_passed.flag' && test -f 'adaptive_preprocessing_test_passed.flag' && test -f 'eeg_foundation_model_test_passed.flag' && test -f 'interpretability_test_passed.flag' && echo 'YES - GO!' || echo 'NO - Fix issues first')"